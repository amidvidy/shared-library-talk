#include <cstdint>
// MNMLSTC
#include <core/optional.hpp>

#define FACTORIAL_API __attribute__ ((visibility ("default")))
#define FACTORIAL_PRIVATE __attribute__ ((visibility ("default")))

namespace factorial {

    // PIMPLed
    class FACTORIAL_API calculator {
    public:
        calculator();
        // note that we declare the constructor here,
        // then default it explicitly in the .cpp

        // this trick allows us to use a unique_ptr<impl>
        // without declaring an destructor for calculator::impl
        // in the header.
        ~calculator();

        // noncopyable
        calculator(const calculator&) = delete;
        calculator& operator=(const calculator&) = delete;

        // need to declare move ctr and move assignment op
        // as they will not be generated by default as
        // we now have a non-copyable member.
        calculator(calculator&&) noexcept;
        calculator& operator=(calculator&&) noexcept;

        uint64_t calculate(uint64_t input);
        inline uint64_t operator()(uint64_t input);
    private:
        class FACTORIAL_PRIVATE impl;

        std::unique_ptr<impl> _impl;
    };

    inline uint64_t calculator::operator()(uint64_t input) {
        return calculate(input);
    }

}
